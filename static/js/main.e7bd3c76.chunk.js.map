{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/EmployeeRow.js","components/EmployeeTable.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Header","SearchBar","props","className","style","width","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","e","preventDefault","genderFilter","EmployeeRow","scope","alt","src","picture","cell","email","dob","EmployeeTable","employees","map","result","key","thumbnail","first","last","date","axios","get","App","state","filteredEmployees","search","searchEmployees","query","API","then","res","console","log","i","data","results","length","Date","getMonth","getDate","getFullYear","setState","catch","err","filteredSearch","searchName","filtered","filter","employee","startsWith","event","target","gender","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAEe,SAASA,IACpB,OACI,gCACG,mDCHI,SAASC,EAAUC,GAC9B,OACI,8BACI,yBAAKC,UAAU,cACX,2BACAC,MAAO,CAACC,MAAM,SACdC,SAAUJ,EAAMK,kBAChBC,MAAON,EAAMM,MACbC,KAAK,SACLC,KAAK,OACLP,UAAU,eACVQ,YAAY,yBACZC,GAAG,WAEH,6BACA,4BAAQC,QAASX,EAAMY,iBAAkBX,UAAU,mBAAnD,gBAGA,6BACA,6BACA,4BACAM,KAAK,OACLI,QAAS,SAACE,GACNA,EAAEC,iBACFd,EAAMe,aAAa,UAJvB,QAQA,4BACAR,KAAK,SACLI,QAAS,SAACE,GACNA,EAAEC,iBACFd,EAAMe,aAAa,YAJvB,YC5BD,SAASC,EAAYhB,GAChC,OACI,4BACI,wBAAIiB,MAAM,OAAM,yBAAKC,IAAKlB,EAAMO,KAAMY,IAAKnB,EAAMoB,WACjD,4BAAKpB,EAAMO,MACX,4BAAKP,EAAMqB,MACX,4BAAKrB,EAAMsB,OACX,4BAAKtB,EAAMuB,MCNR,SAASC,EAAcxB,GAClC,OACI,6BACI,2BAAOC,UAAU,oBACb,+BACA,4BACI,wBAAIgB,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QAGA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACKjB,EAAMyB,UAAUC,KAAI,SAAAC,GAAM,OACvB,kBAACX,EAAD,CACAY,IAAKD,EAAOjB,GAAGJ,MACfc,QAASO,EAAOP,QAAQS,UACxBtB,KAAI,UAAKoB,EAAOpB,KAAKuB,MAAjB,YAA0BH,EAAOpB,KAAKwB,MAC1CV,KAAMM,EAAON,KACbC,MAAOK,EAAOL,MACdC,IAAKI,EAAOJ,IAAIS,a,qBCtBzB,EACL,WACN,OAAOC,IAAMC,IAJD,iDCOKC,G,kNAEnBC,MAAQ,CACNX,UAAW,GACXY,kBAAmB,GACnBC,OAAQ,I,EAOVC,gBAAkB,SAAAC,GACdC,EAAWD,GACNE,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACV,IAAI,IAAIG,EAAI,EAAGA,EAAIH,EAAII,KAAKC,QAAQC,OAAQH,IAAI,CAC5C,IAAIvB,EAAM,IAAI2B,KAAKP,EAAII,KAAKC,QAAQF,GAAGvB,IAAIS,MAC3CW,EAAII,KAAKC,QAAQF,GAAGvB,IAAIS,KAAxB,UAAkCT,EAAI4B,WAAW,EAAjD,YAAsD5B,EAAI6B,UAA1D,YAAuE7B,EAAI8B,eAE/E,EAAKC,SAAS,CAAE7B,UAAWkB,EAAII,KAAKC,QAASX,kBAAmBM,EAAII,KAAKC,aAG5EO,OAAM,SAAAC,GAAG,OAAIZ,QAAQC,IAAIW,O,EAGlCC,eAAiB,SAACC,GAChB,IAAMC,EAAW,EAAKvB,MAAMX,UAAUmC,QAAO,SAACC,GAC5C,OAAQA,EAAStD,KAAKuB,MAAMgC,WAAWJ,IAAeG,EAAStD,KAAKwB,KAAK+B,WAAWJ,MAEtF,EAAKJ,SAAS,CACZjB,kBAAmBsB,K,EAIvBtD,kBAAoB,SAAA0D,GAChB,IAAMxD,EAAOwD,EAAMC,OAAOzD,KACpBD,EAAQyD,EAAMC,OAAO1D,MAC3B,EAAKgD,SAAL,eACG/C,EAAOD,IACP,WACD,EAAKmD,eAAe,EAAKrB,MAAME,Y,EAMrCvB,aAAe,SAACkD,GACd,IAAMN,EAAW,EAAKvB,MAAMX,UAAUmC,QAAO,SAACC,GAC5C,OAAQA,EAASI,SAAWA,KAE9B,EAAKX,SAAS,CACZjB,kBAAmBsB,K,kEA3CnBO,KAAK3B,oB,+BAgDP,OACE,yBAAKtC,UAAU,OACb,kBAACH,EAAD,MACA,kBAACC,EAAD,CACAM,kBAAmB6D,KAAK7D,kBACxBU,aAAcmD,KAAKnD,eAEnB,kBAACS,EAAD,CACEC,UAAWyC,KAAK9B,MAAMC,yB,GAjEC8B,cCGbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.e7bd3c76.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n    return (\n        <header>\n           <h1>Employee Directory</h1>\n        </header>\n    )\n}\n","import React from 'react'\n\nexport default function SearchBar(props) {\n    return (\n        <form>\n            <div className=\"form-group\">\n                <input\n                style={{width:'200px'}}\n                onChange={props.handleInputChange}\n                value={props.value}\n                name=\"search\"\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search For an Employee\"\n                id=\"search\"\n                />\n                <br />\n                <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\n                Refresh List\n                </button>\n                <br/>\n                <br/>\n                <button \n                name=\"male\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    props.genderFilter(\"male\")\n                } }>\n                    Male\n                </button>\n                <button \n                name=\"female\"\n                onClick={(e) => {\n                    e.preventDefault();\n                    props.genderFilter(\"female\")\n                    }}>\n                    Female\n                </button>\n            </div>\n        </form>\n    )\n}\n","import React from 'react';\n\nexport default function EmployeeRow(props) {\n    return (\n        <tr>\n            <th scope=\"row\"><img alt={props.name} src={props.picture} /></th>\n            <td>{props.name}</td>\n            <td>{props.cell}</td>\n            <td>{props.email}</td>\n            <td>{props.dob}</td> \n        </tr>\n    )\n}","import React from 'react'\nimport EmployeeRow from './EmployeeRow';\n\nexport default function EmployeeTable(props) {\n    return (\n        <div>\n            <table className=\"table table-dark\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">Image</th>\n                    <th scope=\"col\">\n                        Name\n                    </th>\n                    <th scope=\"col\">Phone</th>\n                    <th scope=\"col\">Email</th>\n                    <th scope=\"col\">DOB</th>\n                </tr>\n                </thead>\n                <tbody> \n                    {props.employees.map(result => (\n                        <EmployeeRow \n                        key={result.id.value}\n                        picture={result.picture.thumbnail}\n                        name={`${result.name.first} ${result.name.last}`}\n                        cell={result.cell}\n                        email={result.email}\n                        dob={result.dob.date}/>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=50&nat=us\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport SearchBar from './components/SearchBar';\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport API from './utils/API';\nimport './App.css';\n\n\n\nexport default class App extends Component {\n\n  state = {\n    employees: [],\n    filteredEmployees: [],\n    search: \"\",\n  };\n\n  componentDidMount() {\n      this.searchEmployees()\n  }\n\n  searchEmployees = query => {\n      API.search(query)\n          .then(res => {\n            console.log(res)\n              for(let i = 0; i < res.data.results.length; i++){\n                  let dob = new Date(res.data.results[i].dob.date)\n                  res.data.results[i].dob.date = `${dob.getMonth()+1}/${dob.getDate()}/${dob.getFullYear()}`\n              }\n              this.setState({ employees: res.data.results, filteredEmployees: res.data.results })\n              \n          })\n          .catch(err => console.log(err));\n  }\n\n  filteredSearch = (searchName) => {\n    const filtered = this.state.employees.filter((employee) => {\n      return (employee.name.first.startsWith(searchName) || employee.name.last.startsWith(searchName))\n    });\n    this.setState({\n      filteredEmployees: filtered\n    })\n  }\n\n  handleInputChange = event => {\n      const name = event.target.name;\n      const value = event.target.value;\n      this.setState({\n        [name]: value\n      }, () => {\n        this.filteredSearch(this.state.search)\n      });\n  };\n\n  \n\n  genderFilter = (gender) => {\n    const filtered = this.state.employees.filter((employee) => {\n      return (employee.gender === gender)\n    });\n    this.setState({\n      filteredEmployees: filtered\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBar \n        handleInputChange={this.handleInputChange}\n        genderFilter={this.genderFilter}\n        />\n        <EmployeeTable \n          employees={this.state.filteredEmployees}\n        />\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}